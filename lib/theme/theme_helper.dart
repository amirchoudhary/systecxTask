import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimaryContainer,
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.red700,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(6.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.teal50,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: colorScheme.onError,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 14.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray60002,
          fontSize: 9.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: 26.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray90001,
          fontSize: 13.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 10.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
        labelSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: 9.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: appTheme.gray80001,
          fontSize: 20.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray80001,
          fontSize: 15.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFFDADA),
    primaryContainer: Color(0XFF494342),
    secondary: Color(0XFF494342),
    secondaryContainer: Color(0X7F9EFFC3),
    tertiary: Color(0XFF494342),
    tertiaryContainer: Color(0X7F9EFFC3),

    // Background colors
    background: Color(0XFF494342),

    // Surface colors
    surface: Color(0XFF494342),
    surfaceTint: Color(0X1428293D),
    surfaceVariant: Color(0X7F9EFFC3),

    // Error colors
    error: Color(0X1428293D),
    errorContainer: Color(0XFF59B751),
    onError: Color(0XFFE6ECF0),
    onErrorContainer: Color(0XFF171725),

    // On colors(text colors)
    onBackground: Color(0XFFFFFFFF),
    onInverseSurface: Color(0XFFE6ECF0),
    onPrimary: Color(0X1428293D),
    onPrimaryContainer: Color(0XFFFFFFFF),
    onSecondary: Color(0XFFFFFFFF),
    onSecondaryContainer: Color(0X1428293D),
    onTertiary: Color(0XFFFFFFFF),
    onTertiaryContainer: Color(0X1428293D),

    // Other colors
    outline: Color(0X1428293D),
    outlineVariant: Color(0XFF494342),
    scrim: Color(0XFF494342),
    shadow: Color(0X1428293D),

    // Inverse colors
    inversePrimary: Color(0XFF494342),
    inverseSurface: Color(0X1428293D),

    // Pending colors
    onSurface: Color(0XFFFFFFFF),
    onSurfaceVariant: Color(0X1428293D),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue50 => Color(0XFFE9F5FD);

  // BlueGray
  Color get blueGray100 => Color(0XFFD2D2D2);
  Color get blueGray10001 => Color(0XFFCDCDCD);
  Color get blueGray10002 => Color(0XFFD1D8DD);
  Color get blueGray400 => Color(0XFF8A8A8A);
  Color get blueGray40001 => Color(0XFF888888);
  Color get blueGray800 => Color(0XFF44444F);
  Color get blueGray900 => Color(0XFF2F2F2F);
  Color get blueGray90001 => Color(0XFF333333);

  // Cyan
  Color get cyan50 => Color(0XFFD0FAF7);

  // DeepOrangeCc
  Color get deepOrange200Cc => Color(0XCCFCB0AA);

  // DeepOrange
  Color get deepOrange50 => Color(0XFFFAEBEB);
  Color get deepOrangeA700 => Color(0XFFEE2817);

  // DeepOrangeAD
  Color get deepOrangeA700D1 => Color(0XD1F2200F);

  // Gray
  Color get gray100 => Color(0XFFF4F4F4);
  Color get gray10001 => Color(0XFFF1F1F5);
  Color get gray200 => Color(0XFFEFEFEF);
  Color get gray20001 => Color(0XFFECECEC);
  Color get gray20002 => Color(0XFFEEEEEE);
  Color get gray20003 => Color(0XFFEAEAEA);
  Color get gray300 => Color(0XFFE6E6E6);
  Color get gray400 => Color(0XFFB2B2B2);
  Color get gray40001 => Color(0XFFC4C4C4);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray500 => Color(0XFF92929D);
  Color get gray50001 => Color(0XFF929292);
  Color get gray5001 => Color(0XFFF9FAFB);
  Color get gray600 => Color(0XFF686873);
  Color get gray60001 => Color(0XFF7C7B7B);
  Color get gray60002 => Color(0XFF716F6F);
  Color get gray60003 => Color(0XFF787885);
  Color get gray60004 => Color(0XFF7C7C7C);
  Color get gray800 => Color(0XFF3A3C40);
  Color get gray80001 => Color(0XFF3E3E3E);
  Color get gray80002 => Color(0XFF3D3D3D);
  Color get gray80003 => Color(0XFF383838);
  Color get gray900 => Color(0XFF0B0E1E);
  Color get gray90001 => Color(0XFF171625);
  Color get gray90002 => Color(0XFF161616);

  // Grayc
  Color get gray3004c => Color(0X4CE6E4E4);
  Color get gray3004c01 => Color(0X4CE7E5E5);

  // Green
  Color get green500 => Color(0XFF30D468);
  Color get green700 => Color(0XFF35962D);

  // Indigo
  Color get indigo50 => Color(0XFFE3E6EB);

  // Orange
  Color get orange300 => Color(0XFFF6BB42);

  // Pink
  Color get pink100 => Color(0XFFF3AEC0);

  // Red
  Color get red200 => Color(0XFFFF9D9D);
  Color get red300 => Color(0XFFDF7171);
  Color get red400 => Color(0XFFF44F41);
  Color get red50 => Color(0XFFFFEEEE);
  Color get red500 => Color(0XFFF53726);
  Color get red50001 => Color(0XFFF94141);
  Color get red600 => Color(0XFFEB3223);
  Color get red700 => Color(0XFFE61A27);
  Color get redA100 => Color(0XFFFF877D);

  // Redc
  Color get red4004c => Color(0X4CE06060);

  // RedCc
  Color get red600Cc => Color(0XCCF13424);

  // Teal
  Color get teal400 => Color(0XFF2EB28B);
  Color get teal40001 => Color(0XFF26AF8D);
  Color get teal50 => Color(0XFFCFFFE1);
  Color get teal5001 => Color(0XFFD0FAE5);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
